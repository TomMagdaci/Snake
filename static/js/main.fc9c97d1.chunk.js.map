{"version":3,"sources":["AppSnake.js","AppBoard.js","index.js"],"names":["Snake","props","resetAppleArr","numOfApp","snakeHead","boardHeight","boardWidth","blockWidth","apple","i","appleXpos","Math","floor","random","appleYpos","Ypos","push","Xpos","resetGame","alert","state","snake","length","size","pop","snakehead","newDirection","x","y","borderWidth","setState","direction","moveInSpecDirection","currXHead","currYHead","flag","retNewApp","width","height","appleEatenFollowingCommands","newApple","checkIfAppleEaten","abs","tryEatSnake","gameLoop","setInterval","replaceHeadAndTail","iters","temp","goUp","goDown","goLeft","goRight","handleKeyDown","event","keyCode","console","log","blockWidthTemp","blockHeightTemp","snakeheadTemp","snakeTemp","blockHeight","document","addEventListener","this","map","snakePart","index","className","style","left","top","background","appleI","React","Component","Board","percentageWidth","id","borderColor","App","rows","cols","grid","row","col","getElementById","parentElement","offsetWidth","ReactDOM","render"],"mappings":"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","file":"static/js/main.fc9c97d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\n\r\n//26.9 19:15\r\nclass Snake extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        let width = props.width;\r\n        console.log(width);\r\n        let height = props.height;\r\n        //balagan!:\r\n        let borderWidth = props.borderWidth\r\n        let blockWidthTemp = borderWidth;\r\n        let blockHeightTemp = borderWidth;\r\n        //\r\n        let snakeheadTemp = {Xpos: 19*width / 20, Ypos: height / 2};\r\n        let snakeTemp = []\r\n        snakeTemp.push(snakeheadTemp);\r\n        snakeTemp.push({Xpos: snakeheadTemp.Xpos, Ypos: snakeheadTemp.Ypos+blockWidthTemp});////\r\n        snakeTemp.push({Xpos: snakeheadTemp.Xpos+blockWidthTemp, Ypos: snakeheadTemp.Ypos+blockWidthTemp})\r\n\r\n        /*let appleXpos = Math.floor(Math.random() * ((width - blockWidthTemp) / blockWidthTemp + 1)) *\r\n        blockWidthTemp\r\n        let appleYpos = Math.floor(Math.random() * ((height - blockWidthTemp) / blockWidthTemp + 1)) *\r\n        blockWidthTemp*/\r\n\r\n        let apple = []\r\n        /*let appleXpos = 19*width / 20;\r\n        let appleYpos = height / 5;\r\n        while(appleYpos == snakeTemp[0].Ypos){\r\n            appleYpos = Math.random * (height-2*borderWidth) + borderWidth;\r\n        }\r\n        let apple2Xpos = 1*width / 20;\r\n        let apple2Ypos = height / 5;\r\n        while(apple2Ypos == snakeTemp[0].Ypos){\r\n            apple2Ypos = Math.random * (height-2*borderWidth) + borderWidth;\r\n        }\r\n        apple.push({Xpos: appleXpos, Ypos: appleYpos});\r\n        apple.push({Xpos: apple2Xpos, Ypos: apple2Ypos});\r\n        apple.push({Xpos: 15*width / 20, Ypos: apple2Ypos});\r\n        apple.push({Xpos: 10*width / 20, Ypos: apple2Ypos});*/\r\n        apple = this.resetAppleArr(4,snakeTemp[0],height,width,borderWidth);\r\n        this.state = {\r\n            boardWidth: width,\r\n            boardHeight: height,\r\n            snakehead: snakeheadTemp,\r\n            snake: snakeTemp,\r\n            blockWidth: blockWidthTemp,\r\n            blockHeight: blockHeightTemp,\r\n            borderWidth: borderWidth,\r\n            direction: {x: 0, y: -borderWidth},\r\n            apple: apple,\r\n        }\r\n\r\n        //this.handlekeyDown = this.handlekeyDown.bind(this);\r\n        \r\n    }\r\n\r\n    resetAppleArr = (numOfApp, snakeHead,boardHeight, boardWidth, blockWidth) =>{\r\n        let apple =[];\r\n        for(let i=0; i<numOfApp; i++){\r\n            let appleXpos = Math.floor(Math.random() * ((boardWidth - blockWidth) / blockWidth + 1)) *\r\n            blockWidth;\r\n            let appleYpos = Math.floor(Math.random() * ((boardHeight - blockWidth) / blockWidth + 1)) *\r\n            blockWidth;\r\n            while(appleYpos == snakeHead.Ypos){\r\n                appleYpos = Math.floor(Math.random() * ((boardHeight - blockWidth) / blockWidth + 1)) *\r\n                blockWidth;\r\n            }\r\n            apple.push({Xpos: appleXpos, Ypos: appleYpos});//\r\n        }\r\n        return apple;\r\n    }\r\n\r\n    resetGame = ()=> {\r\n        alert(\"GameOver... your score was: \"+ this.state.snake.length+\"\\n\" +\"Try again!\")\r\n        let snake = this.state.snake;\r\n        let size = snake.length;\r\n        while(size>0){\r\n            snake.pop();\r\n            size--;\r\n        }\r\n        let snakehead = {Xpos: 19*this.state.boardWidth / 20, Ypos: this.state.boardWidth / 2};\r\n        snake.push(snakehead);\r\n        let newDirection = {x: 0, y: -this.state.borderWidth};\r\n        this.setState({snake: snake, direction: newDirection})\r\n    }\r\n\r\n    moveInSpecDirection = () => {\r\n        let snake = this.state.snake;\r\n        let currXHead= snake[0].Xpos;\r\n        let currYHead = snake[0].Ypos;\r\n        snake[0].Xpos+=this.state.direction.x;//\r\n        snake[0].Ypos+=this.state.direction.y;\r\n        let flag =0;\r\n        if((snake[0].Xpos > this.state.boardWidth-this.state.borderWidth) &&\r\n        (this.state.direction.x >= 0) && (flag==0)){\r\n            snake[0].Xpos=0;\r\n            flag=1;\r\n        }//\r\n        if((snake[0].Ypos > this.state.boardHeight-this.state.borderWidth) &&\r\n         (this.state.direction.y >=0) && (flag==0)){\r\n            snake[0].Ypos=0;\r\n            flag=1;\r\n         }\r\n\r\n        if((snake[0].Xpos < 0) &&\r\n        (this.state.direction.x<0) && (flag==0)){\r\n            snake[0].Xpos= this.state.boardWidth-this.state.borderWidth;\r\n            flag=1;\r\n        }\r\n\r\n        if((snake[0].Ypos < 0) &&\r\n        (this.state.direction.y<0) && (flag==0)){\r\n            snake[0].Ypos= this.state.boardHeight-this.state.borderWidth;\r\n            flag=1;\r\n        }\r\n\r\n        for(let i=snake.length-1; i>=1; i--){\r\n            if(i==1){\r\n                snake[i].Xpos=currXHead;////\r\n                snake[i].Ypos=currYHead;\r\n                continue;\r\n            }\r\n            snake[i].Xpos=snake[i-1].Xpos;\r\n            snake[i].Ypos=snake[i-1].Ypos;\r\n        }\r\n\r\n        /*for(let i=1; i<snake.length;i++){\r\n\r\n            snake[i].Xpos\r\n        }*/\r\n\r\n        this.setState({snake: snake})\r\n    }\r\n\r\n    retNewApp = () => {\r\n        let width = this.state.boardWidth;\r\n        let height = this.state.boardHeight;\r\n        let blockWidth = this.state.blockWidth;\r\n        let appleXpos = Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\r\n        blockWidth\r\n        let appleYpos = Math.floor(Math.random() * ((height - blockWidth) / blockWidth + 1)) *\r\n        blockWidth\r\n        while(appleYpos == this.state.snake[0].Ypos){\r\n            appleYpos = Math.floor(Math.random() * ((height - blockWidth) / blockWidth + 1)) *\r\n            blockWidth\r\n        }\r\n        return {Xpos: appleXpos, Ypos: appleYpos};\r\n    }\r\n\r\n    appleEatenFollowingCommands = (i) =>{\r\n        let snake = this.state.snake;\r\n        let direction = this.state.direction;\r\n        let blockWidth = this.state.blockWidth;\r\n        let apple = this.state.apple;\r\n        if (direction.x!=0){\r\n            if(direction.x<0){\r\n                snake.push({Xpos: snake[snake.length-1].Xpos+blockWidth, Ypos: snake[snake.length-1].Ypos});\r\n            } else{\r\n                snake.push({Xpos: snake[snake.length-1].Xpos-blockWidth, Ypos: snake[snake.length-1].Ypos});\r\n            }\r\n        } else{ //direction.y!=0\r\n            if(direction.y<0){\r\n                snake.push({Xpos: snake[snake.length-1].Xpos, Ypos: snake[snake.length-1].Ypos+blockWidth});\r\n            } else{\r\n                snake.push({Xpos: snake[snake.length-1].Xpos, Ypos: snake[snake.length-1].Ypos-blockWidth});\r\n            }\r\n        }\r\n        let newApple = this.retNewApp();\r\n        apple[i]=newApple;\r\n        this.setState({snake: snake, apple: apple})\r\n    }\r\n\r\n    checkIfAppleEaten = () =>{\r\n        let snake = this.state.snake;\r\n        let apple = this.state.apple;\r\n        let blockWidth = this.state.blockWidth;\r\n        for(let i=0; i<apple.length; i++){\r\n            if(Math.abs(snake[0].Xpos- apple[i].Xpos)<3*blockWidth/4 &&\r\n                Math.abs(snake[0].Ypos- apple[i].Ypos) < 3*blockWidth/4){\r\n                this.appleEatenFollowingCommands(i);\r\n                }////\r\n        }\r\n    }\r\n\r\n    tryEatSnake = () => {\r\n        let snake = this.state.snake;\r\n        let size = snake.length;\r\n        let blockWidth = this.state.blockWidth;\r\n        for (let i=1; i<size;i++ ){\r\n            if (Math.abs(snake[0].Xpos- snake[i].Xpos)<blockWidth/3 &&\r\n                Math.abs(snake[0].Ypos- snake[i].Ypos) < blockWidth/3){\r\n                    this.resetGame();\r\n                    return;\r\n                }\r\n        }\r\n    }\r\n\r\n    gameLoop = () =>{\r\n        setInterval(() => {\r\n            this.moveInSpecDirection()\r\n            this.checkIfAppleEaten()\r\n            this.tryEatSnake()\r\n          }, 200)\r\n          /*setInterval(() => {\r\n            \r\n          }, 1000)*/\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyDown);\r\n        this.gameLoop();\r\n    }\r\n\r\n    /*componentDidUpdate() {\r\n    }*/\r\n\r\n    replaceHeadAndTail = () =>{\r\n        let snake =this.state.snake;\r\n        let iters = Math.floor(snake.length/2);\r\n        let size = snake.length;\r\n        for(let i=0; i<iters; i++){\r\n            let temp = snake[i];\r\n            snake[i]=snake[size-1-i];\r\n            snake[size-1-i]=temp;\r\n        }\r\n        return snake;\r\n    }\r\n\r\n    goUp = () => {\r\n        let direction= this.state.direction;\r\n        let flag =0;\r\n        let snake=[]\r\n        if(direction.y<0){\r\n            return;\r\n        }\r\n        if(direction.y>0) { //right now its going down\r\n            snake=this.replaceHeadAndTail();\r\n            flag=1\r\n        }\r\n        let blockWidth = this.state.blockWidth;\r\n        direction.x = 0;\r\n        direction.y = -blockWidth;\r\n        if(flag==1){\r\n            this.setState({snake:snake, direction: direction});\r\n        } else{\r\n            this.setState({direction: direction}); \r\n        }\r\n        return;\r\n    }\r\n    goDown = () => {\r\n        let direction= this.state.direction;\r\n        let flag =0;\r\n        let snake=[]\r\n        if(direction.y>0){\r\n            return;\r\n        }\r\n        if(direction.y<0){\r\n            snake=this.replaceHeadAndTail();\r\n            flag=1\r\n        }\r\n        let blockWidth = this.state.blockWidth;\r\n        direction.x = 0;\r\n        direction.y = blockWidth;\r\n        if(flag==1){\r\n            this.setState({snake:snake, direction: direction});\r\n        } else{\r\n            this.setState({direction: direction}); \r\n        }\r\n    }\r\n    goLeft = () => {\r\n        let direction= this.state.direction;\r\n        let flag =0;\r\n        let snake=[]\r\n        if(direction.x<0){\r\n            return;\r\n        }\r\n        if(direction.x>0){\r\n            snake=this.replaceHeadAndTail();\r\n            flag=1\r\n        }\r\n        let blockWidth = this.state.blockWidth;\r\n        direction.x = -blockWidth;\r\n        direction.y = 0;\r\n        if(flag==1){\r\n            this.setState({snake:snake, direction: direction});\r\n        } else{\r\n            this.setState({direction: direction}); \r\n        } \r\n    }\r\n    goRight = () => {\r\n        let direction= this.state.direction;\r\n        let flag =0;\r\n        let snake=[]\r\n        if(direction.x>0){\r\n            return;\r\n        }\r\n        if(direction.x<0){\r\n            snake=this.replaceHeadAndTail();\r\n            flag=1\r\n        }\r\n        let blockWidth = this.state.blockWidth;\r\n        direction.x = blockWidth;\r\n        direction.y = 0;\r\n        if(flag==1){\r\n            this.setState({snake:snake, direction: direction});\r\n        } else{\r\n            this.setState({direction: direction}); \r\n        }  \r\n    }\r\n\r\n\r\n    handleKeyDown = (event) => {\r\n        //alert(\"key number \"+ event.keyCode + \"was clicked\");\r\n        let up =38, left=37,right=39,down=40;\r\n        switch(event.keyCode){\r\n            case up:\r\n                this.goUp();\r\n                break;\r\n            case down:\r\n                this.goDown();\r\n                break;\r\n            case left:\r\n                this.goLeft();\r\n                break;\r\n            case right:\r\n                this.goRight();\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            {this.state.snake.map((snakePart, index) => {\r\n          return (\r\n            <div\r\n              key={index}\r\n              className='Block'\r\n              style={{\r\n                width: this.state.blockWidth,\r\n                height: this.state.blockHeight,\r\n                left: snakePart.Xpos,\r\n                top: snakePart.Ypos,\r\n                background: 'orange',\r\n              }}\r\n            />\r\n          )\r\n        })}\r\n        {this.state.apple.map((appleI, index)=>{\r\n            return(\r\n                <div \r\n                key={index}\r\n                className=\"dot\"\r\n                style={{width: this.state.blockWidth, \r\n                        height:this.state.blockWidth,\r\n                        left: appleI.Xpos,\r\n                        top: appleI.Ypos,\r\n                        background: 'Turquoise'}}>\r\n                \r\n            </div>\r\n            )\r\n        })}\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Snake;\r\n//","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport Snake from './AppSnake.js';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            percentageWidth: props.percentageWidth,\r\n            width: props.width,\r\n            height: props.height,\r\n            borderWidth: props.width / 50,\r\n            flag: 0,\r\n        }\r\n        /*\r\n                let percentageWidth = 65;\r\n        let width =\r\n          document.getElementById('root').parentElement.offsetWidth *\r\n          (percentageWidth / 100);\r\n        width -= width % 30;\r\n        if (width < 30) width = 30;\r\n        let height = (width / 3) * 2;\r\n        let blockWidth = width / 30;\r\n        let blockHeight = height / 30;\r\n        */\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*setInterval(() => {\r\n            if(this.state.flag===1){\r\n                this.setState({flag: 0})\r\n            } else{\r\n                this.setState({flag: 1})\r\n            }\r\n          }, 1000)*/\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        return {percentageWidth: props.percentageWidth,\r\n                width: props.width,\r\n                height: props.height,}\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div\r\n        id='GameBoard'\r\n        style={{\r\n          width: this.state.width,\r\n          height: this.state.height,\r\n          borderWidth: this.state.borderWidth,\r\n          borderColor: \"gray\",\r\n        }}>\r\n            \r\n         <Snake width={this.state.width} height={this.state.height} borderWidth ={this.state.borderWidth} />\r\n            \r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './AppBoard.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n  super();\n  // Initiate state\n  this.state = {\n    rows: 10,\n    cols: 10,\n    grid: [],\n  };\n\n  //this.setState({ grid: grid })\n}\n\ngetRandomGrid() {\n  return {\n    row: Math.floor((Math.random() * this.state.rows)),\n    col: Math.floor((Math.random() * this.state.cols))\n  }\n}\n/*\ncomponentDidMount() {\n  setTimeout(() => {\n    const food = this.getRandomGrid();\n  }, 1000)\n}*/\n  \n  render () {\n        // Game size initialization\n        \n        let percentageWidth = 60;\n        let width =\n          document.getElementById('root').parentElement.offsetWidth *\n          (percentageWidth / 100);\n        width -= width % 30;\n        if (width < 30) width = 30;\n        let height = (width / 3) * 2;\n        let blockWidth = width / 30;\n        let blockHeight = height / 30;\n\n    /*let snake = []\n    let snakeHead = { Xpos: width / 2, Ypos: height / 2 };\n    snake.push(snakeHead);\n    snake.push({Xpos: width/2 -1, Ypos: height/2});*/\n    return (\n    <div>\n      <Board percentageWidth=\"65\" width={width} height={height} />\n        </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}